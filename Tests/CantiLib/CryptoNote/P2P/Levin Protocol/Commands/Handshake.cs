using Canti.Data;
using System;
using System.Collections.Generic;

namespace Canti.CryptoNote.P2P.Commands
{
    internal class CommandHandshake
    {
        // Command ID
        internal const int Id = GlobalsConfig.LEVIN_COMMANDS_BASE + 1;

        // Outgoing request structure
        internal struct Request : ICommandRequestBase
        {
            // Variables
            internal NodeData NodeData { get; set; }
            internal CoreSyncData PayloadData { get; set; }

            // Serializes request data into a byte array
            public byte[] Serialize()
            {
                // Create a portable storage
                PortableStorage Storage = new PortableStorage();

                // Add entries
                Storage.AddEntry("node_data", NodeData);
                Storage.AddEntry("payload_data", PayloadData);

                // Return serialized byte array
                return Storage.Serialize();
            }
        }

        // Incoming response structure
        internal struct Response : ICommandResponseBase<Response>
        {
            // Variables
            internal NodeData NodeData { get; set; }
            internal CoreSyncData PayloadData { get; set; }
            internal PeerlistEntry[] LocalPeerlistNew { get; set; }

            // Serializes response data
            public byte[] Serialize()
            {
                // Create a portable storage
                PortableStorage Storage = new PortableStorage();

                // Add entries
                if (!Storage.AddEntry("node_data", NodeData)) Console.WriteLine("Failed to add basic_node_data");
                if (!Storage.AddEntry("payload_data", PayloadData)) Console.WriteLine("Failed to add core_sync_data");
                if (!Storage.AddEntry("local_peerlist", "")) Console.WriteLine("Failed to add local_peerlist_new");

                // Return serialized byte array
                return Storage.Serialize();
            }

            // Deseriaizes response data
            public Response Deserialize(byte[] Data)
            {
                // Deserialize data
                //Data = Encoding.DecompressByteArray(Data);
                return Encoding.DecodeObject<Response>(Data);

                // Populate and return new response
                /*return new Response
                {
                    
                };*/
            }
        }
    }
}
